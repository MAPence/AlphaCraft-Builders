<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contractor Calendar</title>
    <style>
        body {
            background-image: url("../resources/images/construction-site.jpg");
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center center;
            margin: 0;
            height: 100vh;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgb(0,0,0);
            background-color: rgba(0,0,0,0.4);
            padding-top: 60px;
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

            .close:hover,
            .close:focus {
                color: black;
                text-decoration: none;
                cursor: pointer;
            }
    </style>
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.0/main.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/dash.css" />
</head>

@model ACB.Models.ContractorVM
@{
    var jobs = Model.Jobs;
}

<body>
    <div class="px-4">
        <div class="calendar-container">
            <h1>Work Schedule</h1>
            <div id="calendar"></div>
        </div>
    </div>

    @foreach (var job in jobs)
    {
        <div class="event">
            <input class="startDate" value="@job.CalendarStart" type="hidden" />
            <input class="endDate" value="@job.CalendarEnd" type="hidden" />
            <input class="client" value="@job.Firstname @job.Lastname" type="hidden" />
        </div>
    }

    <div id="eventModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <form id="eventForm">
                <label for="eventName">Event Name:</label>
                <input type="text" id="eventName" name="eventName" required>
                <br />
                <label for="eventDate">Event Date:</label>
                <input type="date" id="eventDate" name="eventDate" required>
                <br />
                <button type="button" id="addEventButton">Add Event</button>
                <button type="button" id="deleteEventButton" style="display:none;">Delete Event</button>
            </form>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.0/main.js"></script>
    <script src="https://apis.google.com/js/api.js"></script>
    <script>
        var CLIENT_ID = '809767339812-5tl6bjk2ehj2kl2n8c2jkjafs5388qkv.apps.googleusercontent.com';
        var API_KEY = 'AIzaSyC7VsB75n8Zg92QqQZVJziCz2rlplm9JY0';
        var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];
        var SCOPES = "https://www.googleapis.com/auth/calendar.readonly";

        var calendar;
        var selectedEvent = null;

        function handleClientLoad() {
            gapi.load('client:auth2', initClient);
        }

        function initClient() {
            gapi.client.init({
                apiKey: API_KEY,
                clientId: CLIENT_ID,
                discoveryDocs: DISCOVERY_DOCS,
                scope: SCOPES
            }).then(function () {
                loadCalendar();
            });
        }

        function loadCalendar() {
            console.log('Calendar initializing...');
            var calendarEl = document.getElementById('calendar');
            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                editable: true,
                selectable: true,
                select: function (info) {
                    selectedEvent = null;
                    showForm(info);
                },
                eventClick: function (info) {
                    selectedEvent = info.event;
                    showForm(info, true);
                },
                events: function (info, successCallback, failureCallback) {
                    gapi.client.calendar.events.list({
                        'calendarId': 'primary',
                        'timeMin': (new Date()).toISOString(),
                        'showDeleted': false,
                        'singleEvents': true,
                        'maxResults': 10,
                        'orderBy': 'startTime'
                    }).then(function (response) {
                        var events = response.result.items;
                        var calendarEvents = events.map(function (event) {
                            return {
                                title: event.summary,
                                start: event.start.dateTime || event.start.date
                            };
                        });
                        successCallback(calendarEvents);
                    }, function (error) {
                        console.error('Error loading Google Calendar events:', error);
                        failureCallback(error);
                    });
                }
            });
            calendar.render();
            console.log('Calendar initialized');
        }

        function showForm(info, isEdit = false) {
            var modal = document.getElementById('eventModal');
            modal.style.display = 'block';
            document.getElementById('eventDate').value = info.startStr;

            if (isEdit) {
                document.getElementById('eventName').value = selectedEvent.title;
                document.getElementById('deleteEventButton').style.display = 'block';
            } else {
                document.getElementById('eventName').value = '';
                document.getElementById('deleteEventButton').style.display = 'none';
            }
        }

        document.getElementById('addEventButton').addEventListener('click', function (e) {
            var eventName = document.getElementById('eventName').value;
            var eventDate = document.getElementById('eventDate').value;
            var calendarApi = calendar;

            var eventStartDate = new Date(eventDate);
            if (!isNaN(eventStartDate.getTime())) {
                if (selectedEvent) {
                    selectedEvent.setProp('title', eventName);
                    selectedEvent.setStart(eventStartDate.toISOString().split('T')[0]);
                    selectedEvent = null;
                } else {
                    calendarApi.addEvent({
                        title: eventName,
                        start: eventStartDate.toISOString().split('T')[0]
                    });
                }

                document.getElementById('eventName').value = '';
                document.getElementById('eventDate').value = '';
                document.getElementById('eventModal').style.display = 'none';

                calendarApi.render();
            } else {
                console.error('Invalid date format');
            }
        });

        document.getElementById('deleteEventButton').addEventListener('click', function (e) {
            if (selectedEvent) {
                selectedEvent.remove();
                selectedEvent = null;
                document.getElementById('eventModal').style.display = 'none';
            }
        });

        document.querySelector('.close').addEventListener('click', function () {
            document.getElementById('eventModal').style.display = 'none';
        });

        window.onclick = function (event) {
            var modal = document.getElementById('eventModal');
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        };

        function addPredefinedEvents(calendar) {
            var holidays = [
                { title: 'New Year\'s Day', start: '2024-01-01' },
                { title: 'Independence Day', start: '2024-07-04' },
                { title: 'Christmas Day', start: '2024-12-25' }
            ];
            calendar.addEventSource(holidays);

            const NodeList = document.querySelectorAll(".event");
            for (let i = 0; i < NodeList.length; i++) {
                var startNode = NodeList[i].querySelector('.startDate');
                var endNode = NodeList[i].querySelector('.endDate');
                var clientNode = NodeList[i].querySelector('.client');
                var start = startNode.value;
                var end = endNode.value;
                var client = clientNode.value;

                console.log(start);
                console.log(i);
                console.log(client);

                var job = [
                    { title: client, start: start, end: end }
                ];
                calendar.addEventSource(job);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            handleClientLoad();

            var calendarEl = document.getElementById('calendar');
            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                editable: true,
                selectable: true,
                select: function (info) {
                    selectedEvent = null;
                    showForm(info);
                },
                eventClick: function (info) {
                    selectedEvent = info.event;
                    showForm(info, true);
                }
            });

            addPredefinedEvents(calendar);
            calendar.render();
        });
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
            onload="this.onload=function(){};handleClientLoad()"
            onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
</body>
</html>